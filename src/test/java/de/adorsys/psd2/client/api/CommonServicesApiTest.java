/*
 * BG PSD2 API
 * # Summary The **NextGenPSD2** *Framework Version 1.3* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**   It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * OpenAPI spec version: 1.3 Dec 20th 2018
 * Contact: info@berlin-group.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.adorsys.psd2.client.api;

import de.adorsys.psd2.client.ApiException;
import de.adorsys.psd2.client.model.Authorisations;
import de.adorsys.psd2.client.model.Error400NGAIS;
import de.adorsys.psd2.client.model.Error400NGPIS;
import de.adorsys.psd2.client.model.Error400NGSB;
import de.adorsys.psd2.client.model.Error401NGAIS;
import de.adorsys.psd2.client.model.Error401NGPIS;
import de.adorsys.psd2.client.model.Error401NGSB;
import de.adorsys.psd2.client.model.Error403NGAIS;
import de.adorsys.psd2.client.model.Error403NGPIS;
import de.adorsys.psd2.client.model.Error403NGSB;
import de.adorsys.psd2.client.model.Error404NGAIS;
import de.adorsys.psd2.client.model.Error404NGPIS;
import de.adorsys.psd2.client.model.Error404NGSB;
import de.adorsys.psd2.client.model.Error405NGAIS;
import de.adorsys.psd2.client.model.Error405NGPIS;
import de.adorsys.psd2.client.model.Error405NGSB;
import de.adorsys.psd2.client.model.Error406NGAIS;
import de.adorsys.psd2.client.model.Error429NGAIS;
import de.adorsys.psd2.client.model.ScaStatusResponse;
import de.adorsys.psd2.client.model.SigningBasketStatusResponse200;
import de.adorsys.psd2.client.model.StartScaprocessResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommonServicesApi
 */
@Ignore
public class CommonServicesApiTest {

    private final CommonServicesApi api = new CommonServicesApi();

    /**
     * Delete the signing basket
     *
     * Delete the signing basket structure as long as no (partial) authorisation has yet been applied. The undlerying transactions are not affected by this deletion.  Remark: The signing basket as such is not deletable after a first (partial) authorisation has been applied. Nevertheless, single transactions might be cancelled on an individual basis on the XS2A interface. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSigningBasketTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        api.deleteSigningBasket(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Read the SCA status of the consent authorisation.
     *
     * This method returns the SCA status of a consent initiation&#x27;s authorisation sub-resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentScaStatusTest() throws ApiException {
        String consentId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getConsentScaStatus(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Read the SCA status of the payment cancellation&#x27;s authorisation.
     *
     * This method returns the SCA status of a payment initiation&#x27;s authorisation sub-resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentCancellationScaStatusTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String cancellationId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getPaymentCancellationScaStatus(paymentService, paymentProduct, paymentId, cancellationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Get Payment Initiation Authorisation Sub-Resources Request
     *
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentInitiationAuthorisationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Authorisations response = api.getPaymentInitiationAuthorisation(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Read the SCA Status of the payment authorisation
     *
     * This method returns the SCA status of a payment initiation&#x27;s authorisation sub-resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentInitiationScaStatusTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getPaymentInitiationScaStatus(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Get Signing Basket Authorisation Sub-Resources Request
     *
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningBasketAuthorisationTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Authorisations response = api.getSigningBasketAuthorisation(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Read the SCA status of the signing basket authorisation
     *
     * This method returns the SCA status of a signing basket&#x27;s authorisation sub-resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningBasketScaStatusTest() throws ApiException {
        String basketId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getSigningBasketScaStatus(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Read the status of the signing basket
     *
     * Returns the status of a signing basket object. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningBasketStatusTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        SigningBasketStatusResponse200 response = api.getSigningBasketStatus(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Start the authorisation process for a consent
     *
     * Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment     Initiation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be     uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,     * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding     Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startConsentAuthorisationTest() throws ApiException {
        String consentId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        StartScaprocessResponse response = api.startConsentAuthorisation(consentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Start the authorisation process for a payment initiation
     *
     * Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment     Initiation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be     uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,     * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding     Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startPaymentAuthorisationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        UUID xRequestID = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        StartScaprocessResponse response = api.startPaymentAuthorisation(paymentService, paymentProduct, paymentId, xRequestID, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Start the authorisation process for the cancellation of the addressed payment
     *
     * Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment     Initiation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be     uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,     * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding     Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startPaymentInitiationCancellationAuthorisationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        StartScaprocessResponse response = api.startPaymentInitiationCancellationAuthorisation(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Start the authorisation process for a signing basket
     *
     * Create an authorisation sub-resource and start the authorisation process of a signing basket. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment     Initiation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be     uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,     * &#x27;startAuthorisationWithPsuAuthentication&#x27; #TODO     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding     Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.     The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSigningBasketAuthorisationTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        StartScaprocessResponse response = api.startSigningBasketAuthorisation(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Update PSU Data for consents
     *
     * This method update PSU data on the consents  resource if needed. It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.  There are several possible Update PSU Data requests in the context of a consent request if needed, which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for     * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:   The Update PSU Data Request might be used   * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method. For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConsentsPsuDataTest() throws ApiException {
        String consentId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        Object body = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Object response = api.updateConsentsPsuData(consentId, authorisationId, xRequestID, body, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Update PSU Data for payment initiation cancellation
     *
     * This method updates PSU data on the cancellation authorisation resource if needed. It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.  There are several possible Update PSU Data requests in the context of a cancellation authorisation within the payment initiation services needed, which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for     * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:   The Update PSU Data Request might be used   * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method. For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePaymentCancellationPsuDataTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String cancellationId = null;
        UUID xRequestID = null;
        Object body = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Object response = api.updatePaymentCancellationPsuData(paymentService, paymentProduct, paymentId, cancellationId, xRequestID, body, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Update PSU data for payment initiation
     *
     * This methods updates PSU data on the authorisation resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed, which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for     * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:   The Update PSU Data Request might be used   * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method. For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePaymentPsuDataTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        Object body = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Object response = api.updatePaymentPsuData(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, body, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Update PSU Data for signing basket
     *
     * This method update PSU data on the signing basket resource if needed. It may authorise a igning basket within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.  There are several possible Update PSU Data requests in the context of a consent request if needed, which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for     * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:   The Update PSU Data Request might be used   * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method. For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,     therefore many optional elements are not present.     Maybe in a later version the access path will change. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSigningBasketPsuDataTest() throws ApiException {
        String basketId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        Object body = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Object response = api.updateSigningBasketPsuData(basketId, authorisationId, xRequestID, body, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
}
