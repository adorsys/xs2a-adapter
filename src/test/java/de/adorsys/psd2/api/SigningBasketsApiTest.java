/*
 * BG PSD2 API
 * # Summary The **NextGenPSD2** *Framework Version 1.2* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Futhermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therfore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) allways the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convinience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We ommit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * OpenAPI spec version: 1.2
 * Contact: info@berlin-group.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.adorsys.psd2.api;

import de.adorsys.psd2.ApiException;
import de.adorsys.psd2.model.Authorisations;
import de.adorsys.psd2.model.ScaStatusResponse;
import de.adorsys.psd2.model.SigningBasket;
import de.adorsys.psd2.model.SigningBasketResponse200;
import de.adorsys.psd2.model.SigningBasketResponse201;
import de.adorsys.psd2.model.StartScaprocessResponse;
import de.adorsys.psd2.model.TppMessages400;
import de.adorsys.psd2.model.TppMessages401;
import de.adorsys.psd2.model.TppMessages403;
import de.adorsys.psd2.model.TppMessages404;
import de.adorsys.psd2.model.TppMessages405;
import de.adorsys.psd2.model.TppMessages406;
import de.adorsys.psd2.model.TppMessages429;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SigningBasketsApi
 */
@Ignore
public class SigningBasketsApiTest {

    private final SigningBasketsApi api = new SigningBasketsApi();

    /**
     * Create a signing basket resource
     *
     * Create a signing basket resource for authorising several transactions with one SCA method.  The resource identifications of these transactions are contained in the  payload of this access method 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSigningBasketTest() throws ApiException {
        UUID xRequestID = null;
        String psUIPAddress = null;
        SigningBasket body = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String consentID = null;
        Boolean tpPRedirectPreferred = null;
        String tpPRedirectURI = null;
        String tpPNokRedirectURI = null;
        Boolean tpPExplicitAuthorisationPreferred = null;
        Object psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        SigningBasketResponse201 response = api.createSigningBasket(xRequestID, psUIPAddress, body, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, consentID, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPExplicitAuthorisationPreferred, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Get Signing Basket Authorisation Sub-Resources Request
     *
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentInitiationAuthorisationTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        Object psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Authorisations response = api.getPaymentInitiationAuthorisation(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Returns the content of an signing basket object.
     *
     * Returns the content of an signing basket object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningBasketTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        Object psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        SigningBasketResponse200 response = api.getSigningBasket(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Read the SCA status of the signing basket authorisation
     *
     * This method returns the SCA status of a signing basket&#x27;s authorisation sub-resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningBasketScaStatusTest() throws ApiException {
        String basketId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        Object psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getSigningBasketScaStatus(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Start the authorisation process for a signing basket
     *
     * Create an authorisation sub-resource and start the authorisation process of a signing basket.  The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * &#x27;startAuthorisationWithPsuIdentfication&#x27;,      * &#x27;startAuthorisationWithPsuAuthentication&#x27;     * &#x27;startAuthorisationWithAuthentciationMethodSelection&#x27;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#x27;startAuthorisation&#x27; hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The &#x27;startAuthorisation&#x27; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSigningBasketAuthorisationTest() throws ApiException {
        String basketId = null;
        UUID xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        Object psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        StartScaprocessResponse response = api.startSigningBasketAuthorisation(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
    /**
     * Update PSU Data for signing basket
     *
     * This method update PSU data on the signing basket resource if needed.  It may authorise a igning basket within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSigningBasketPsuDataTest() throws ApiException {
        String basketId = null;
        String authorisationId = null;
        UUID xRequestID = null;
        Object body = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        Object psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        UUID psUDeviceID = null;
        String psUGeoLocation = null;
        Object response = api.updateSigningBasketPsuData(basketId, authorisationId, xRequestID, body, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);

        // TODO: test validations
    }
}
