{
	"info": {
		"_postman_id": "ec7115eb-fe60-4202-b6ce-326ec26b6e3b",
		"name": "xs2a-adapter-adorsys-sandbox-local",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AIS",
			"item": [
				{
					"name": "01_Create_AIS_consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53b1f9f6-c902-4b09-b746-9ce756fe1120",
								"exec": [
									"var jsonData = pm.response.json();",
									"   ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction status is received\", function () {",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});",
									"",
									"var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
									"    ",
									"var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
									"if (matches && matches[1]) {",
									"    var authorisationId = matches[1];",
									"    pm.globals.set(\"authorisationId\", authorisationId);",
									"}",
									"",
									"pm.globals.set(\"consentId\", pm.response.json().consentId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b23c8d5-9e12-4ff9-8e15-00edbc2ec369",
								"exec": [
									"const date = new Date();",
									"date.setDate(date.getDate() + 1);",
									"const tomorrow = date.toISOString().split(\"T\")[0];",
									"pm.globals.set(\"validUntil\", tomorrow);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-IP-Address",
								"value": "0.0.0.0"
							},
							{
								"key": "X-GTW-BANK-CODE",
								"value": "{{bankCode}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "false",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": {\n        \"balances\": [\n            {\n                \"iban\": \"DE38760700240320465700\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"iban\": \"DE38760700240320465700\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"accounts\": [\n            {\n                \"iban\": \"DE38760700240320465700\",\n                \"currency\": \"EUR\"\n            }\n        ]\n    },\n    \"combinedServiceIndicator\": \"false\",\n    \"recurringIndicator\": \"true\",\n    \"validUntil\": \"{{validUntil}}\",\n    \"frequencyPerDay\": \"4\"\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "02_Get_AIS_consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49fc416f-7765-4c03-a892-aea24f827e34",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-BANK-CODE",
								"value": "{{bankCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						},
						"description": "Standard GET Consent test\n\nDeliver a GET Consent Request where the consent-Id equals the consent Id from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "03_Get_AIS_consent_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49fc416f-7765-4c03-a892-aea24f827e34",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-BANK-CODE",
								"value": "{{bankCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/status",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"status"
							]
						},
						"description": "Consent status test - received\n\nDeliver a GET Consent Status Request where the consent-Id equals the consentId from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "04_Update_PSU_data_Send_PSU_password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae7e14f-31f0-45c2-9004-47a64d28fe92",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-Bank-Code",
								"type": "text",
								"value": "{{bankCode}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "05_Update_PSU_data_Choose_SCA_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae7e14f-31f0-45c2-9004-47a64d28fe92",
								"exec": [
									"pm.test(\"scaStatus is scaMethodSelected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
									"});",
									"",
									"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
									"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId\");",
									"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-Bank-Code",
								"value": "{{bankCode}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authenticationMethodId\": \"edymWzVrTLwhvW6UTOZFv4\"\r\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "06_Update_PSU_data_Send_authentication_data(TAN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b397a1a-d656-4218-b363-eb4bba353252",
								"exec": [
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-GTW-Bank-Code",
								"value": "{{bankCode}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scaAuthenticationData\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "07_Get_AIS_consent_authorisation_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e65f94d6-2b57-44b0-9c2e-3a18c8713193",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-BANK-CODE",
								"value": "{{bankCode}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "08_Get_account_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08eb6b0d-8760-407b-9818-d2b01fa48faf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"accountId\", jsonData.accounts[0].resourceId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Accepted values are application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"description": "128-bit universally unique identifier (rf. ISO/IEC 11578:1996) - Format: 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"description": "Use specific data per TPP-Registration-Number"
							},
							{
								"key": "X-GTW-BANK-CODE",
								"value": "{{bankCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts?withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "09_Get_transactions_by_account_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "591a8b3b-91a2-448b-ad70-907557d84792",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"transactions\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"transactions\");",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"balances\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "Consent-ID",
								"type": "text",
								"value": "{{consentId}}"
							},
							{
								"key": "X-GTW-Bank-Code",
								"type": "text",
								"value": "{{bankCode}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&bookingStatus=both&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "bookingStatus",
									"value": "both"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						},
						"description": "Read Transaction List Request including the optional query parameter '?withBalance=true'"
					},
					"response": []
				},
				{
					"name": "10_Get_balances_by_account_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bd043d6-71c3-4c16-9925-384927e41562",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('balances');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-Bank-Code",
								"value": "{{bankCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/balances",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"balances"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PIS",
			"item": [
				{
					"name": "01_Create_payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4efa145-5a35-4b82-af51-90ee995ae199",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction status is received\", function () {",
									"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
									"});",
									"",
									"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
									"",
									"var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
									"var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
									"",
									"if (matches && matches[1]) {",
									"    var authorisationId = matches[1];",
									"    pm.globals.set(\"authorisationId\", authorisationId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "0.0.0.0"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId}}"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType}}"
							},
							{
								"key": "X-GTW-Bank-Code",
								"type": "text",
								"value": "{{bankCode}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"DE38760700240320465700\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"creditor_name_sample\",\n    \"debtorAccount\": {\n        \"iban\": \"DE38760700240320465700\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\"\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"payments",
								"sepa-credit-transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "02_Get_payment_by_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4efa145-5a35-4b82-af51-90ee995ae199",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Transaction status received\", function () {",
									"    pm.expect(jsonData).to.have.property('transactionStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-IP-Address",
								"value": "0.0.0.0",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType}}",
								"type": "text"
							},
							{
								"key": "X-GTW-Bank-Code",
								"value": "{{bankCode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"payments",
								"sepa-credit-transfers",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "03_Get_transaction_status_by_payment_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26c04d43-e3bc-4bf0-acc8-59622c3b23aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transaction status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-GTW-Bank-Code",
								"value": "{{bankCode}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/status",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"payments",
								"sepa-credit-transfers",
								"{{paymentId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "04_Update_PSU_data_Send_PSU_password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae7e14f-31f0-45c2-9004-47a64d28fe92",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-Bank-Code",
								"type": "text",
								"value": "{{bankCode}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId}}"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"12345\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"payments",
								"sepa-credit-transfers",
								"{{paymentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "05_Update_PSU_data_Choose_SCA_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae7e14f-31f0-45c2-9004-47a64d28fe92",
								"exec": [
									"pm.test(\"scaStatus is scaMethodSelected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
									"});",
									"",
									"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
									"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId\");",
									"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-Bank-Code",
								"type": "text",
								"value": "{{bankCode}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authenticationMethodId\": \"edymWzVrTLwhvW6UTOZFv4\"\r\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"payments",
								"sepa-credit-transfers",
								"{{paymentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "06_Update_PSU_data_Send_authentication_data(TAN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b397a1a-d656-4218-b363-eb4bba353252",
								"exec": [
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-Bank-Code",
								"type": "text",
								"value": "{{bankCode}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scaAuthenticationData\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"payments",
								"sepa-credit-transfers",
								"{{paymentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
