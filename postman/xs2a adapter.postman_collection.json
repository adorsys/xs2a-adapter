{
	"info": {
		"_postman_id": "57ea573d-aa40-4d06-8156-360faaad9e35",
		"name": "xs2a adapter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AIS",
			"item": [
				{
					"name": "GET ASPSP ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5239ed71-4d97-4e37-a72a-e7a93cced24c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"aspspId\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"aspsps"
							],
							"query": [
								{
									"key": "bic",
									"value": "{{bic}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Create/006",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dbe534d-4ce7-4a6e-9889-5ad75304885d",
								"exec": [
									"var jsonData = pm.response.json();",
									"   ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction status is received\", function () {",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});",
									"",
									"if (jsonData._links.updatePsuAuthentication) {",
									"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
									"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3\");",
									"    }",
									"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
									"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
									"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3\");",
									"    } else {",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2\");",
									"    }",
									"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
									"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
									"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_encrypted\");",
									"    } else {",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_encrypted\");",
									"    }",
									"} else if (jsonData._links.scaRedirect) {",
									"    var scaRedirect = jsonData._links.scaRedirect.href;",
									"    var adapter = pm.variables.get(\"adapter\");",
									"    pm.globals.set(\"scaRedirect\", scaRedirect);",
									"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
									"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
									"        postman.setNextRequest(\"SCA/Redirect/DAB&Consors&Sparda_AIS\");",
									"    }",
									"} else if (jsonData._links.startAuthorisation) {",
									"    if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2\");",
									"    } else {",
									"        postman.setNextRequest(\"SCA/Redirect/001a_Msg2\");",
									"    }",
									"} else if (jsonData._links.scaOAuth) {",
									"    pm.globals.set(\"scaOAuth\", jsonData._links.scaOAuth.href);",
									"    postman.setNextRequest(\"oauth2_token_static_code\");",
									"}",
									"",
									"if (pm.variables.get(\"adapter\") === \"santander\") {",
									"    postman.setNextRequest(\"AIS/Accounts/005c_MsgX+1\");",
									"}",
									"",
									"pm.globals.set(\"consentId\", pm.response.json().consentId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb152675-3d0e-4bb3-a811-ccf712e25ebd",
								"exec": [
									"const date = new Date();",
									"date.setDate(date.getDate() + 1);",
									"const tomorrow = date.toISOString().split(\"T\")[0];",
									"pm.globals.set(\"validUntil\", tomorrow);",
									"",
									"pm.globals.unset(\"scaRedirect\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-IP-Address",
								"value": "0.0.0.0"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "true",
								"type": "text",
								"disabled": true
							},
							{
								"key": "TPP-Redirect-URI",
								"value": "https://example.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": {\n        \"balances\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"accounts\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ]\n    },\n    \"combinedServiceIndicator\": \"false\",\n    \"recurringIndicator\": \"true\",\n    \"validUntil\": \"{{validUntil}}\",\n    \"frequencyPerDay\": \"4\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Get/002",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3365f0f-9fb0-484e-a02b-cf69d9d09119",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						},
						"description": "Standard GET Consent test\n\nDeliver a GET Consent Request where the consent-Id equals the consent Id from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Status/003a",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88876ecb-7355-4753-b955-dc4de7237643",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/status",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"status"
							]
						},
						"description": "Consent status test - received\n\nDeliver a GET Consent Status Request where the consent-Id equals the consentId from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "SCA/Redirect/DAB&Consors&Sparda_AIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8df7b4bf-c9cc-43bf-aa53-dc80dc336901",
								"exec": [
									"pm.test(\"Consent status is valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The consent status has changed to: valid\");",
									"});",
									"",
									"postman.setNextRequest(\"DefaultGetSCAStatus AIS_redirect\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
							"host": [
								"{{scaRedirect}}"
							],
							"query": [
								{
									"key": "psu-id",
									"value": "PSU-Successful"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DefaultGetSCAStatus AIS_redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "093275e5-fad4-4f46-a5e4-79c0b8cebf3f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});",
									"",
									"postman.setNextRequest(\"AIS/Accounts/005c_MsgX+1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "oauth2_token_static_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1530ec78-ad73-4c46-a7c2-b340e2b604c7",
								"exec": [
									"pm.globals.set(\"access_token\",  pm.response.json().access_token);",
									"postman.setNextRequest(\"AIS/Accounts/005c_MsgX+1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "authorization_code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/oauth2/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/Redirect/001a_Msg2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de02b518-167f-4b1b-bcc6-8879adb0f3d5",
								"exec": [
									"postman.setNextRequest(null);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"_links/scaOAuth/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.scaOAuth.href\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a Consent request that needs authentication. The redirect SCA approach is selected. A link to start the authorisation is contained in the request."
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a18b0c9-9851-406c-9ec8-f2ad5c721109",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3\");",
									"});",
									"",
									"// workaround for Unicredit Bank",
									"if (jsonData._links.updatePsuAuthentication) {",
									"    pm.globals.set(\"authorisationId\", jsonData.authorisationId);",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d93341e-0970-4911-8cc0-4dfe5199a143",
								"exec": [
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    pm.request.headers.add({",
									"        key: \"TPP-Redirect-URI\",",
									"        value: \"https://example.com\"",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "false",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_encrypted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2523c34f-fea7-479c-bbe3-894d15817923",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_encrypted\");",
									"});",
									"",
									"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
									"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3ec6cee-8963-47ad-9651-1426b2f0a6ff",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    var href = jsonData._links.authoriseTransaction.href;",
									"    var queryParams = href.slice(href.indexOf(\"?\"), href.length);",
									"    pm.globals.set(\"queryParams\", queryParams);",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4\");",
									"} else {",
									"    pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"        pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"    });",
									"",
									"    pm.test(\"SCA methods are available\", function () {",
									"        pm.response.to.have.jsonBody(\"scaMethods\");",
									"        postman.setGlobalVariable(\"authenticationMethodId_AIS\",jsonData.scaMethods[0].authenticationMethodId);",
									"    });",
									"",
									"    pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"        pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3\");",
									"    });",
									"}",
									"",
									"// workaround for Unicredit",
									"if (jsonData._links.authoriseTransaction) {",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_encrypted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf4ac706-092c-49d4-9836-ba0605e7aba7",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"    postman.setGlobalVariable(\"authenticationMethodId\",jsonData.scaMethods[0].authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType_AIS}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09f8716a-2b36-4d7a-92d9-1a6d5eb0247a",
								"exec": [
									"pm.test(\"scaStatus is scaMethodSelected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
									"});",
									"",
									"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
									"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_AIS\");",
									"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_AIS}}\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09830841-b11c-4951-83c7-7c640fc02a6a",
								"exec": [
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "694fb0c9-39e8-4116-a1c1-aeb10a73a883",
								"exec": [
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    pm.request.url = request.url + pm.variables.get(\"queryParams\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_AIS}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DefaultGetSCAStatus AIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b78b1905-5844-4347-8c0e-796f4d0a58e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/005c_MsgX+1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7faafd5-f646-4f35-be4f-a93750d0b4cc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"let accounts = jsonData.accounts;",
									"let iban = pm.variables.get(\"iban_AIS\");",
									"",
									"pm.globals.set(\"accountId\", accounts.find(a => a.iban === iban).resourceId);",
									"",
									"if (pm.variables.get(\"adapter\") === \"sparkasse\") {",
									"    postman.setNextRequest(\"AIS/Accounts/021a_MsgX+1\");",
									"} else {",
									"    postman.setNextRequest(\"AIS/Accounts/005c_MsgX+2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Accepted values are application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"description": "128-bit universally unique identifier (rf. ISO/IEC 11578:1996) - Format: 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"description": "Use specific data per TPP-Registration-Number"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts?withBalance=false",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/005c_MsgX+2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fad917b6-7032-4e02-ae50-1e26af4d09a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"transactions\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"transactions\");",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"balances\");",
									"});",
									"",
									"postman.setNextRequest(\"AIS/Accounts/020c_MsgX+3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&dateTo=1970-02-01&bookingStatus=booked&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "dateTo",
									"value": "2020-07-01"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						},
						"description": "Read Transaction List Request including the optional query parameter '?withBalance=true'"
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/021a_MsgX+1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "527fc04f-a850-474a-9b63-468e4f130de2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in format camt.52\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"urn:iso:std:iso:20022:tech:xsd:camt.052.001.02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&dateTo=1970-02-01&bookingStatus=booked&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "dateTo",
									"value": "1970-02-01"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/020c_MsgX+3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "338da60b-a31f-4197-8bef-421d3ba876a5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('balances');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/balances",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Del/003",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2356f352-2b78-4328-8df9-9e261cad37ad",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1a76d60e-1420-44ab-b921-15ddeb08b910",
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.upsert({",
							"    key: \"Authorization\",",
							"    value: \"Bearer {{access_token}}\",",
							"    disabled: !pm.globals.has(\"access_token\")",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "18a0ce0a-a952-4643-91f5-4c2f8ebc1256",
						"type": "text/javascript",
						"exec": [
							"if (pm.response.code >= 400) {",
							"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers\");",
							"}",
							"",
							"pm.test(\"Response code is successful\", function () {",
							"    pm.expect(pm.response.code).to.be.below(400);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AIS_X",
			"item": [
				{
					"name": "/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth2/authorization-request-uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf2f791a-a9bf-411b-b213-9095d20ebf8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/oauth2/authorization-request-uri?state=xyz&redirect_uri=https://client.example.com/cb&sca_oauth_link={{scaOAuth}}&consent_id={{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"authorization-request-uri"
							],
							"query": [
								{
									"key": "state",
									"value": "xyz"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb"
								},
								{
									"key": "sca_oauth_link",
									"value": "{{scaOAuth}}"
								},
								{
									"key": "consent_id",
									"value": "{{consentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth2/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a60c72fe-94f8-4696-b5f6-6a2453b1746e",
								"exec": [
									"pm.globals.set(\"access_token\",  pm.response.json().access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "sca_oauth_link",
									"value": "{{scaOAuth}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/oauth2/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PIS",
			"item": [
				{
					"name": "sepa-credit-transfers",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc79e269-c604-47cd-bbe5-a96803f1ec8d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36887128-ecd7-4f0c-bbbb-5469a669dcff",
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"sepa-credit-transfers-supported\");    // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"sepa-credit-transfers-supported\");    // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/PaymentInit/Products/001a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a5f83cf-8ff4-42f0-9fb7-c23e21ce80fb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_encrypted\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_encrypted\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"PIS/GetTransactionStatus/001a\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d853359c-366d-44e5-bdbe-864720f31d3f",
										"exec": [
											"pm.globals.unset(\"scaRedirect\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b59419ca-197f-4209-8951-c7418583efb1",
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});",
											"",
											"postman.setNextRequest(\"PIS/GetPayment/001a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetTransactionStatus/001a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2081d371-e9b7-414d-a657-898de397cdcd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetPayment/001a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f0b2ea1-a961-40fa-a141-24e4d8db0a86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status received\", function () {",
											"    pm.expect(jsonData).to.have.property('transactionStatus');",
											"});",
											"",
											"if (jsonData.transactionStatus === 'ACSC' || jsonData.transactionStatus === 'RCVD') {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd114da0-d97d-4f05-804a-15c42af50e58",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers\");",
											"});",
											"",
											"// workaround for Unicredit Bank",
											"if (jsonData._links.selectAuthenticationMethod) {",
											"    var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
											"} else if (jsonData._links.authoriseTransaction) {",
											"    var authoriseTransactionUri = jsonData._links.authoriseTransaction.href;",
											"    pm.globals.set(\"authorisationId\", authoriseTransactionUri.split(\"/\").pop());",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b3c8919-9179-42aa-8ca8-490dcd9dbffb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_encrypted\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4ec4127-4067-475d-bc95-55b22e51c1a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"    postman.setGlobalVariable(\"authenticationMethodId_PIS\",jsonData.scaMethods[0].authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32b8891a-8262-4399-8822-09ce08c6d2d0",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed26d63c-83c2-4f8a-874a-b2e2843ac762",
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b14b3bed-9701-462d-b074-62b9f0a59844",
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"DefaultGetSCAStatus_payments_sepa\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DefaultGetSCAStatus_payments_sepa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "617f5726-8d01-4170-8e9b-8a2864ca0ee8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "14cbeba5-5bed-49f6-be2d-3d57f04dc06a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4850451-195e-4019-9485-b4d9ab790875",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
									"}"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "pain.001-sepa-credit-transfers",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "766930ee-2c4d-4493-b828-08a1fbf6fbb6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1288d7bc-b26f-45f0-97b6-06bcd53ee655",
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"pain.001-sepa-credit-transfers-supported\");   // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"pain.001-sepa-credit-transfers-supported\");   // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/PaymentInit/Products/001e",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93fd411a-7250-4a7a-9bd0-ae0034912a0d",
										"exec": [
											"pm.globals.unset(\"scaRedirect\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b9837cea-3279-4a99-acea-7ef62ac0cbc3",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.03\">\n    <CstmrCdtTrfInitn>\n        <GrpHdr>\n            <MsgId>PSD294387538754378</MsgId>\n            <CreDtTm>2018-12-10T09:40:47.314+01:00</CreDtTm>\n            <NbOfTxs>1</NbOfTxs>\n            <CtrlSum>100</CtrlSum>\n            <InitgPty>\n                <Nm>Name InitgPty</Nm>\n            </InitgPty>\n        </GrpHdr>\n        <PmtInf>\n            <PmtInfId>NOTPROVIDED</PmtInfId>\n            <PmtMtd>TRF</PmtMtd>\n            <NbOfTxs>1</NbOfTxs>\n            <CtrlSum>100</CtrlSum>\n            <ReqdExctnDt>1999-01-01</ReqdExctnDt>\n            <Dbtr>\n                <Nm>Debtor Name</Nm>\n            </Dbtr>\n            <DbtrAcct>\n                <Id>\n                    <IBAN>{{iban_PIS}}</IBAN>\n                </Id>\n            </DbtrAcct>\n            <DbtrAgt>\n                <FinInstnId>\n                    <BIC>TESTDETT421</BIC>\n                </FinInstnId>\n            </DbtrAgt>\n            <ChrgBr>SLEV</ChrgBr>\n            <CdtTrfTxInf>\n                <PmtId>\n                    <EndToEndId>EndToEndId</EndToEndId>\n                </PmtId>\n                <Amt>\n                    <InstdAmt Ccy=\"EUR\">100</InstdAmt>\n                </Amt>\n                <Cdtr>\n                    <Nm>Hans Handbuch</Nm>\n                </Cdtr>\n                <CdtrAcct>\n                    <Id>\n                        <IBAN>{{iban_PIS}}</IBAN>\n                    </Id>\n                </CdtrAcct>\n                <RmtInf>\n                    <Ustrd>POSTPaymentEmbPain_OK</Ustrd>\n                </RmtInf>\n            </CdtTrfTxInf>\n        </PmtInf>\n    </CstmrCdtTrfInitn>\n</Document>"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers"
									]
								},
								"description": "Processing of a Payment Initiation Request for a single payment with service sepa-credit-transfer with the body in XML format.\nPayInitReqStart-1.1: It has to be checked that for each Single Payment product/endpoint supported by the ASPSP according to IO2 a payment resource can be successfully created."
							},
							"response": []
						},
						{
							"name": "PIS/GetTransactionStatus/001e",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87bec906-054f-41b2-9804-e01dfbd5cb58",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								},
								"description": "Processing of a Get Transaction Status Request after a Payment Initiation Request for a single payment with product sepa-credit-transfer with the body in XML format."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f2aa974-05e8-42bf-842b-41a65bd59560",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_pain001_sepa_credit_transfers\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/Redirect/DAB&Consors&Sparda_PIS_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc41a935-f1eb-4faa-b85d-c2c47ffceebc",
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0d35515-67cd-44e9-9eab-de88447e8a75",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23671948-f989-4c11-8a12-8c6812f3eb2a",
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fdcbd31-0310-47cc-923f-56439c3ca14e",
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"DefaultGetSCAStatus_payments_pain01_sepa\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DefaultGetSCAStatus_payments_pain01_sepa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1548ec73-32c5-4e88-be3c-3da3d8585cd1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d6c95db-64fd-4e15-bbca-016c43a83c84",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5c67164-7221-4efe-8953-2a8687adc008",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic\");",
									"}"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "periodic-payments",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15b0263b-9387-475c-8369-4e7657f54be6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81bdae54-2891-48c4-b399-8025152d3957",
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"sepa-credit-transfers-supported\");    // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"sepa-credit-transfers-supported\");    // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/PaymentInit/Products/003a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcf47bbd-a6a5-4457-b13d-fbe307f1cc4e",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic_encrypted\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic_encrypted\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers_periodic\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"PIS/GetTransactionStatus/003a\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee9d1fa1-884c-429b-8656-41aa8b5284f3",
										"exec": [
											"pm.globals.unset(\"scaRedirect\");",
											"",
											"const date = new Date();",
											"const today = date.toISOString().split(\"T\")[0];",
											"date.setDate(date.getDate() + 30);",
											"const monthLater = date.toISOString().split(\"T\")[0];",
											"pm.globals.set(\"start_date\", today);",
											"pm.globals.set(\"end_date\", monthLater);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\",\n    \"startDate\": \"{{start_date}}\",\n    \"endDate\": \"{{end_date}}\",\n\t\"executionRule\": \"following\",\n\t\"frequency\": \"Monthly\",\n    \"dayOfExecution\": \"28\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da88d49a-2e0a-4730-96d2-0655b05fe706",
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});",
											"",
											"postman.setNextRequest(\"PIS/GetPayment/003a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetTransactionStatus/003a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3f7850e-3b39-47d7-b84b-2eea29a02299",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetPayment/003a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f09bd0ed-1744-4cc5-a307-04bb92138841",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status received\", function () {",
											"    pm.expect(jsonData).to.have.property('transactionStatus');",
											"});",
											"",
											"if (jsonData.transactionStatus === 'ACSC' || jsonData.transactionStatus === 'RCVD') {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a7ad169-5629-49dc-9372-b775a9d5d4c5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic\");",
											"});",
											"",
											"// workaround for Unicredit Bank",
											"if (jsonData._links.selectAuthenticationMethod) {",
											"    var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
											"} else if (jsonData._links.authoriseTransaction) {",
											"    var authoriseTransactionUri = jsonData._links.authoriseTransaction.href;",
											"    pm.globals.set(\"authorisationId\", authoriseTransactionUri.split(\"/\").pop());",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers_periodic\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca304e39-1c48-49cc-90a9-2c497294df65",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic_encrypted\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1119ae8c-bd0e-436d-89e7-6c447620b2c9",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"    postman.setGlobalVariable(\"authenticationMethodId_PIS\",jsonData.scaMethods[0].authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb487c5c-bd05-4efb-ad32-fc9ad19fe3df",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63274a8c-a6cd-47f1-a15a-5596986dbb49",
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12ddef49-3055-43a0-9d1f-37cd0163c049",
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"",
											"postman.setNextRequest(\"DefaultGetSCAStatus_periodic_sepa\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DefaultGetSCAStatus_periodic_sepa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d02ba4ff-4f57-4b8f-8741-b73b6763c57a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9e91feb-1d5c-4588-8642-b2f800376df5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21511ac8-bc3b-4851-90a5-abe478bad0ff",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
									"}"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "00d02f6e-3cd2-4b5f-b4e4-d9163a7a4b21",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aab042a4-9dd9-4ac7-abab-0a48e43f6178",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code is successful\", function () {",
							"    pm.expect(pm.response.code).to.be.below(400);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
