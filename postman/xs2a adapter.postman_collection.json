{
	"info": {
		"_postman_id": "cf52c377-8a2f-4b2e-ac97-8be0059f98af",
		"name": "xs2a adapter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EMBEDDED PRESTEP",
			"item": [
				{
					"name": "PreStep_Login",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user\",\n    \"password\": \"user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/embedded-pre-auth/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"embedded-pre-auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AIS",
			"item": [
				{
					"name": "GET ASPSP ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"aspspId\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"aspsps"
							],
							"query": [
								{
									"key": "bic",
									"value": "{{bic}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createConsent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"   ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction status is received\", function () {",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});",
									"",
									"if (jsonData._links.updatePsuAuthentication) {",
									"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
									"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"updateConsentsPsuData_updatePsuAuthentication\");",
									"    }",
									"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
									"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
									"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"updateConsentsPsuData_updatePsuAuthentication\");",
									"    } else {",
									"        postman.setNextRequest(\"startConsentAuthorisation_updatePsuAuthentication\");",
									"    }",
									"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
									"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
									"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"updateConsentsPsuData_updateEncryptedPsuAuthentication\");",
									"    } else {",
									"        postman.setNextRequest(\"startConsentAuthorisation_updateEncryptedPsuAuthentication\");",
									"    }",
									"} else if (jsonData._links.scaRedirect) {",
									"    var scaRedirect = jsonData._links.scaRedirect.href;",
									"    var adapter = pm.variables.get(\"adapter\");",
									"    pm.globals.set(\"scaRedirect\", scaRedirect);",
									"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
									"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
									"        postman.setNextRequest(\"scaRedirect_DAB&Consors&Sparda_AIS\");",
									"    }",
									"} else if (jsonData._links.startAuthorisation) {",
									"    if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"        postman.setNextRequest(\"startConsentAuthorisation_updatePsuAuthentication\");",
									"    } else {",
									"        postman.setNextRequest(\"startConsentAuthorisation\");",
									"    }",
									"} else if (jsonData._links.scaOAuth) {",
									"    pm.globals.set(\"scaOAuth\", jsonData._links.scaOAuth.href);",
									"    postman.setNextRequest(\"scaOAuth_token_static_code\");",
									"}",
									"",
									"if (pm.variables.get(\"adapter\") === \"santander\") {",
									"    postman.setNextRequest(\"getAccountList\");",
									"}",
									"",
									"pm.globals.set(\"consentId\", pm.response.json().consentId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const date = new Date();",
									"date.setDate(date.getDate() + 1);",
									"const tomorrow = date.toISOString().split(\"T\")[0];",
									"pm.globals.set(\"validUntil\", tomorrow);",
									"",
									"pm.globals.unset(\"scaRedirect\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-IP-Address",
								"value": "0.0.0.0"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "false",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-URI",
								"value": "https://example.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": {\n        \"balances\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"accounts\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ]\n    },\n    \"combinedServiceIndicator\": \"false\",\n    \"recurringIndicator\": \"true\",\n    \"validUntil\": \"{{validUntil}}\",\n    \"frequencyPerDay\": \"4\"\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "getConsentInformation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						},
						"description": "Standard GET Consent test\n\nDeliver a GET Consent Request where the consent-Id equals the consent Id from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "getConsentStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/status",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"status"
							]
						},
						"description": "Consent status test - received\n\nDeliver a GET Consent Status Request where the consent-Id equals the consentId from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "scaRedirect_DAB&Consors&Sparda_AIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Consent status is valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The consent status has changed to: valid\");",
									"});",
									"",
									"postman.setNextRequest(\"getConsentAuthorisation\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
							"host": [
								"{{scaRedirect}}"
							],
							"query": [
								{
									"key": "psu-id",
									"value": "PSU-Successful"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "scaOAuth_token_static_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"access_token\",  pm.response.json().access_token);",
									"postman.setNextRequest(\"getAccountList\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "authorization_code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUri}}/oauth2/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "startConsentAuthorisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setNextRequest(null);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"_links/scaOAuth/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.scaOAuth.href\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a Consent request that needs authentication. The redirect SCA approach is selected. A link to start the authorisation is contained in the request."
					},
					"response": []
				},
				{
					"name": "startConsentAuthorisation_updatePsuAuthentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"    postman.setNextRequest(\"updateConsentsPsuData_selectPsuAuthenticationMethod\");",
									"});",
									"",
									"// workaround for Unicredit Bank",
									"if (jsonData._links.updatePsuAuthentication) {",
									"    pm.globals.set(\"authorisationId\", jsonData.authorisationId);",
									"    postman.setNextRequest(\"updateConsentsPsuData_updatePsuAuthentication\");",
									"} else {",
									"    let selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
									"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    pm.request.headers.add({",
									"        key: \"TPP-Redirect-URI\",",
									"        value: \"https://example.com\"",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "false",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_AIS}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
					},
					"response": []
				},
				{
					"name": "startConsentAuthorisation_updateEncryptedPsuAuthentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_encrypted\");",
									"});",
									"",
									"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
									"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_AIS}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
					},
					"response": []
				},
				{
					"name": "updateConsentsPsuData_updatePsuAuthentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    var href = jsonData._links.authoriseTransaction.href;",
									"    var queryParams = href.slice(href.indexOf(\"?\"), href.length);",
									"    pm.globals.set(\"queryParams\", queryParams);",
									"    postman.setNextRequest(\"updateConsentsPsuData_transactionAuthorisation\");",
									"} else {",
									"    pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"        pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"    });",
									"",
									"    pm.test(\"SCA methods are available\", function () {",
									"        pm.response.to.have.jsonBody(\"scaMethods\");",
									"        postman.setGlobalVariable(\"authenticationMethodId_AIS\",jsonData.scaMethods[0].authenticationMethodId);",
									"    });",
									"",
									"    pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"        pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"        postman.setNextRequest(\"updateConsentsPsuData_selectPsuAuthenticationMethod\");",
									"    });",
									"}",
									"",
									"// workaround for Unicredit",
									"if (jsonData._links.authoriseTransaction) {",
									"    postman.setNextRequest(\"updateConsentsPsuData_transactionAuthorisation\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_AIS}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateConsentsPsuData_updateEncryptedPsuAuthentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"    postman.setGlobalVariable(\"authenticationMethodId\",jsonData.scaMethods[0].authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType_AIS}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_AIS}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateConsentsPsuData_selectPsuAuthenticationMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"scaStatus is scaMethodSelected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
									"});",
									"",
									"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
									"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_AIS\");",
									"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_AIS}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateConsentsPsuData_transactionAuthorisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});",
									"",
									"// workaround for Fiducia",
									"if (pm.variables.get(\"adapter\") === \"fiducia\") {",
									"    pm.globals.set(\"consentId\", \"CONSENTVALID\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    pm.request.url = request.url + pm.variables.get(\"queryParams\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_AIS}}\"\n}"
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getConsentAuthorisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"AuthorisationIds are not empty\", function () {",
									"    pm.expect(jsonData.authorisationIds[0]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAccountList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"let accounts = jsonData.accounts;",
									"let iban = pm.variables.get(\"iban_AIS\");",
									"",
									"pm.globals.set(\"accountId\", accounts.find(a => a.iban === iban).resourceId);",
									"",
									"if (pm.variables.get(\"adapter\") === \"sparkasse\") {",
									"    postman.setNextRequest(\"getTransactionList_accept_unspecified\");",
									"} else {",
									"    postman.setNextRequest(\"getTransactionList_accept_json\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Accepted values are application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"description": "128-bit universally unique identifier (rf. ISO/IEC 11578:1996) - Format: 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"description": "Use specific data per TPP-Registration-Number"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts?withBalance=false",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getTransactionList_accept_json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"transactions\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"transactions\");",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"balances\");",
									"});",
									"",
									"postman.setNextRequest(\"getBalances\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&dateTo=2020-07-01&bookingStatus=booked&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "dateTo",
									"value": "2020-07-01"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						},
						"description": "Read Transaction List Request including the optional query parameter '?withBalance=true'"
					},
					"response": []
				},
				{
					"name": "getTransactionList_accept_unspecified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in format camt.52\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"urn:iso:std:iso:20022:tech:xsd:camt.052.001.02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&dateTo=1970-02-01&bookingStatus=booked&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "dateTo",
									"value": "1970-02-01"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBalances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('balances');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/balances",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteConsent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getScaStatus",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.upsert({",
							"    key: \"Authorization\",",
							"    value: \"Bearer {{access_token}}\",",
							"    disabled: !pm.globals.has(\"access_token\")",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (pm.response.code >= 400) {",
							"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers\");",
							"}",
							"",
							"pm.test(\"Response code is successful\", function () {",
							"    pm.expect(pm.response.code).to.be.below(400);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "AIS_X",
			"item": [
				{
					"name": "/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth2/authorization-request-uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/oauth2/authorization-request-uri?state=xyz&redirect_uri=https://client.example.com/cb&sca_oauth_link={{scaOAuth}}&consent_id={{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"authorization-request-uri"
							],
							"query": [
								{
									"key": "state",
									"value": "xyz"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb"
								},
								{
									"key": "sca_oauth_link",
									"value": "{{scaOAuth}}"
								},
								{
									"key": "consent_id",
									"value": "{{consentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth2/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"access_token\",  pm.response.json().access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "sca_oauth_link",
									"value": "{{scaOAuth}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUri}}/oauth2/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PIS",
			"item": [
				{
					"name": "sepa-credit-transfers",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"sepa-credit-transfers-supported\");    // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"sepa-credit-transfers-supported\");    // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "initiatePayment_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updatePsuAuthentication_payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updatePsuAuthentication_payments/sepa-credit-transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"startPaymentAuthorisation_updatePsuAuthentication_payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updateEncyptedPsuAuthentication_payments/sepa-credit-transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"startPaymentAuthorisation_updateEncyptedPsuAuthentication_payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"scaRedirect_DAB&Consors&Sparda_payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"getPaymentInitiationStatus_payments/sepa-credit-transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.unset(\"scaRedirect\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "scaRedirect_DAB&Consors&Sparda_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});",
											"",
											"postman.setNextRequest(\"getPaymentInformation_payments/sepa-credit-transfers\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationStatus_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInformation_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status received\", function () {",
											"    pm.expect(jsonData).to.have.property('transactionStatus');",
											"});",
											"",
											"if (jsonData.transactionStatus === 'ACSC' || jsonData.transactionStatus === 'RCVD') {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "startPaymentAuthorisation_updatePsuAuthentication_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"updatePaymentPsuData_selectPsuAuthenticationMethod_payments/sepa-credit-transfers\");",
											"});",
											"",
											"// workaround for Unicredit Bank",
											"if (jsonData._links.selectAuthenticationMethod) {",
											"    var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
											"} else if (jsonData._links.authoriseTransaction) {",
											"    var authoriseTransactionUri = jsonData._links.authoriseTransaction.href;",
											"    pm.globals.set(\"authorisationId\", authoriseTransactionUri.split(\"/\").pop());",
											"    postman.setNextRequest(\"updatePaymentPsuData_transactionAuthorisation_payments/sepa-credit-transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationAuthorisation_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AuthorisationIds are not empty\", function () {",
											"    pm.expect(jsonData.authorisationIds[0]).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "startPaymentAuthorisation_updateEncyptedPsuAuthentication_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_encrypted\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_updatePsuAuthentication_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"    postman.setGlobalVariable(\"authenticationMethodId_PIS\",jsonData.scaMethods[0].authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"updatePaymentPsuData_selectPsuAuthenticationMethod_payments/sepa-credit-transfers\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_updateEncyptedPsuAuthentication_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_selectPsuAuthenticationMethod_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_transactionAuthorisation_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"getPaymentInitiationScaStatus_payments/sepa-credit-transfers\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationScaStatus_payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "pain.001-sepa-credit-transfers",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"pain.001-sepa-credit-transfers-supported\");   // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"pain.001-sepa-credit-transfers-supported\");   // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "initiatePayment_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.unset(\"scaRedirect\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"value": "false",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.03\">\n    <CstmrCdtTrfInitn>\n        <GrpHdr>\n            <MsgId>PSD294387538754378</MsgId>\n            <CreDtTm>2018-12-10T09:40:47.314+01:00</CreDtTm>\n            <NbOfTxs>1</NbOfTxs>\n            <CtrlSum>100</CtrlSum>\n            <InitgPty>\n                <Nm>Name InitgPty</Nm>\n            </InitgPty>\n        </GrpHdr>\n        <PmtInf>\n            <PmtInfId>NOTPROVIDED</PmtInfId>\n            <PmtMtd>TRF</PmtMtd>\n            <NbOfTxs>1</NbOfTxs>\n            <CtrlSum>100</CtrlSum>\n            <ReqdExctnDt>1999-01-01</ReqdExctnDt>\n            <Dbtr>\n                <Nm>Debtor Name</Nm>\n            </Dbtr>\n            <DbtrAcct>\n                <Id>\n                    <IBAN>{{iban_PIS}}</IBAN>\n                </Id>\n            </DbtrAcct>\n            <DbtrAgt>\n                <FinInstnId>\n                    <BIC>TESTDETT421</BIC>\n                </FinInstnId>\n            </DbtrAgt>\n            <ChrgBr>SLEV</ChrgBr>\n            <CdtTrfTxInf>\n                <PmtId>\n                    <EndToEndId>EndToEndId</EndToEndId>\n                </PmtId>\n                <Amt>\n                    <InstdAmt Ccy=\"EUR\">100</InstdAmt>\n                </Amt>\n                <Cdtr>\n                    <Nm>Hans Handbuch</Nm>\n                </Cdtr>\n                <CdtrAcct>\n                    <Id>\n                        <IBAN>{{iban_PIS}}</IBAN>\n                    </Id>\n                </CdtrAcct>\n                <RmtInf>\n                    <Ustrd>POSTPaymentEmbPain_OK</Ustrd>\n                </RmtInf>\n            </CdtTrfTxInf>\n        </PmtInf>\n    </CstmrCdtTrfInitn>\n</Document>"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers"
									]
								},
								"description": "Processing of a Payment Initiation Request for a single payment with service sepa-credit-transfer with the body in XML format.\nPayInitReqStart-1.1: It has to be checked that for each Single Payment product/endpoint supported by the ASPSP according to IO2 a payment resource can be successfully created."
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationStatus_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								},
								"description": "Processing of a Get Transaction Status Request after a Payment Initiation Request for a single payment with product sepa-credit-transfer with the body in XML format."
							},
							"response": []
						},
						{
							"name": "startPaymentAuthorisation_updatePsuAuthentication_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"updatePaymentPsuData_selectPsuAuthenticationMethod_payments/pain.001-sepa-credit-transfers\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationAuthorisation_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AuthorisationIds are not empty\", function () {",
											"    pm.expect(jsonData.authorisationIds[0]).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "scaRedirect_DAB&Consors&Sparda_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_updatePsuAuthentication_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_selectPsuAuthenticationMethod_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_transactionAuthorisation_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"getPaymentInitiationScaStatus_payments/pain.001-sepa-credit-transfers\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationScaStatus_payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic\");",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "periodic-payments",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"sepa-credit-transfers-supported\");    // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"sepa-credit-transfers-supported\");    // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "initiatePayment_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updatePsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updatePsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"startPaymentAuthorisation_updatePsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updateEncyptedPsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"startPaymentAuthorisation_updateEncyptedPsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"scaRedirect_DAB&Consors&Sparda_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"getPaymentInitiationStatus_periodic-payments/sepa-credit-transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.unset(\"scaRedirect\");",
											"",
											"const date = new Date();",
											"const today = date.toISOString().split(\"T\")[0];",
											"date.setDate(date.getDate() + 30);",
											"const monthLater = date.toISOString().split(\"T\")[0];",
											"pm.globals.set(\"start_date\", today);",
											"pm.globals.set(\"end_date\", monthLater);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\",\n    \"startDate\": \"{{start_date}}\",\n    \"endDate\": \"{{end_date}}\",\n\t\"executionRule\": \"following\",\n\t\"frequency\": \"Monthly\",\n    \"dayOfExecution\": \"28\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "scaRedirect_DAB&Consors&Sparda_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});",
											"",
											"postman.setNextRequest(\"getPaymentInformation_periodic-payments/sepa-credit-transfers\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationStatus_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInformation_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status received\", function () {",
											"    pm.expect(jsonData).to.have.property('transactionStatus');",
											"});",
											"",
											"if (jsonData.transactionStatus === 'ACSC' || jsonData.transactionStatus === 'RCVD') {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "startPaymentAuthorisation_updatePsuAuthentication_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"updatePaymentPsuData_selectPsuAuthenticationMethod_periodic-payments/sepa-credit-transfers\");",
											"});",
											"",
											"// workaround for Unicredit Bank",
											"if (jsonData._links.selectAuthenticationMethod) {",
											"    var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
											"} else if (jsonData._links.authoriseTransaction) {",
											"    var authoriseTransactionUri = jsonData._links.authoriseTransaction.href;",
											"    pm.globals.set(\"authorisationId\", authoriseTransactionUri.split(\"/\").pop());",
											"    postman.setNextRequest(\"updatePaymentPsuData_transactionAuthorisation_periodic-payments/sepa-credit-transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationAuthorisation_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AuthorisationIds are not empty\", function () {",
											"    pm.expect(jsonData.authorisationIds[0]).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "startPaymentAuthorisation_updateEncyptedPsuAuthentication_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic_encrypted\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_updatePsuAuthentication_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"    postman.setGlobalVariable(\"authenticationMethodId_PIS\",jsonData.scaMethods[0].authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"updatePaymentPsuData_selectPsuAuthenticationMethod_periodic-payments/sepa-credit-transfers\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_updateEncyptedPsuAuthentication_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_selectPsuAuthenticationMethod_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_transactionAuthorisation_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"",
											"postman.setNextRequest(\"getPaymentInitiationScaStatus_periodic-payments/sepa-credit-transfers\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationScaStatus_periodic-payments/sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "periodic/pain.001-sepa-credit-transfers",
					"item": [
						{
							"name": "initiatePayment_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updatePsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updatePsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"startPaymentAuthorisation_updatePsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"updatePaymentPsuData_updateEncyptedPsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"startPaymentAuthorisation_updateEncyptedPsuAuthentication_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"scaRedirect_DAB&Consors&Sparda_periodic-payments/sepa-credit-transfers\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"getPaymentInitiationStatus_periodic-payments/sepa-credit-transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.unset(\"scaRedirect\");",
											"",
											"const date = new Date();",
											"const today = date.toISOString().split(\"T\")[0];",
											"date.setDate(date.getDate() + 30);",
											"const monthLater = date.toISOString().split(\"T\")[0];",
											"pm.globals.set(\"start_date\", today);",
											"pm.globals.set(\"end_date\", monthLater);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "xml_sct",
											"value": "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.03\">  <CstmrCdtTrfInitn>    <GrpHdr>      <MsgId>MIPI-123456789RI-123456789</MsgId>      <CreDtTm>2017-02-14T20:23:34.000Z</CreDtTm>      <NbOfTxs>1</NbOfTxs>      <CtrlSum>123</CtrlSum>      <InitgPty>        <Nm>PaymentInitiator</Nm>        <Id><OrgId><Othr><Id>DE10000000012</Id>          <SchmeNm><Prptry>PISP</Prptry></SchmeNm></Othr></OrgId></Id>      </InitgPty>    </GrpHdr>    <PmtInf>      <PmtInfId>BIPI-123456789RI-123456789</PmtInfId>      <PmtMtd>TRF</PmtMtd>      <NbOfTxs>1</NbOfTxs>      <CtrlSum>123</CtrlSum>      <PmtTpInf><SvcLvl><Cd>SEPA</Cd></SvcLvl></PmtTpInf>      <ReqdExctnDt>2017-02-15</ReqdExctnDt>      <Dbtr><Nm>PSU Name</Nm></Dbtr>      <DbtrAcct><Id><IBAN>{{iban_PIS}}</IBAN></Id></DbtrAcct>      <ChrgBr>SLEV</ChrgBr>      <CdtTrfTxInf>        <PmtId><EndToEndId>RI-123456789</EndToEndId></PmtId>        <Amt><InstdAmt Ccy=\"EUR\">123</InstdAmt></Amt>        <Cdtr><Nm>{{creditorName}}</Nm></Cdtr>        <CdtrAcct><Id><IBAN> DE23100120020123456789</IBAN></Id></CdtrAcct>        <RmtInf><Ustrd>Ref Number Merchant-123456</Ustrd></RmtInf>      </CdtTrfTxInf>    </PmtInf>  </CstmrCdtTrfInitn></Document>",
											"type": "text"
										},
										{
											"key": "json_standingorderType",
											"value": "{\n  \"startDate\": \"2018-03-01\",\n  \"executionRule\": \"following\",\n  \"frequency\": \"Monthly\",\n  \"dayOfExecution\": \"1\"\n}",
											"type": "text"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "startPaymentAuthorisation_updatePsuAuthentication_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"updatePaymentPsuData_selectPsuAuthenticationMethod_payments/pain.001-sepa-credit-transfers\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationAuthorisation_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AuthorisationIds are not empty\", function () {",
											"    pm.expect(jsonData.authorisationIds[0]).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_selectPsuAuthenticationMethod_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatePaymentPsuData_transactionAuthorisation_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"getPaymentInitiationScaStatus_payments/pain.001-sepa-credit-transfers\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationStatus_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentInitiationScaStatus_periodic-payments/pain.001-sepa-credit-transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code is successful\", function () {",
							"    pm.expect(pm.response.code).to.be.below(400);",
							"});"
						]
					}
				}
			]
		}
	]
}