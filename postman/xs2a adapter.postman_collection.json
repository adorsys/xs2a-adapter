{
	"info": {
		"_postman_id": "7f3763a8-1e4e-4b87-b9a9-ebf4e49323d0",
		"name": "xs2a adapter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AIS",
			"item": [
				{
					"name": "GET ASPSP ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1f1c6ae-18b8-4137-9910-359dac6be35c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"aspspId\", jsonData[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"aspsps"
							],
							"query": [
								{
									"key": "bic",
									"value": "{{bic}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Create/006",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a51ae48c-f9a1-4601-b9e2-fa95790bdde0",
								"exec": [
									"var jsonData = pm.response.json();",
									"   ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction status is received\", function () {",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});",
									"",
									"if (jsonData._links.updatePsuAuthentication) {",
									"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
									"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3\");",
									"    }",
									"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
									"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
									"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3\");",
									"    } else {",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2\");",
									"    }",
									"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
									"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
									"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
									"    if (matches && matches[1]) {",
									"        var authorisationId = matches[1];",
									"        pm.globals.set(\"authorisationId\", authorisationId);",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_encrypted\");",
									"    } else {",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_encrypted\");",
									"    }",
									"} else if (jsonData._links.scaRedirect) {",
									"    var scaRedirect = jsonData._links.scaRedirect.href;",
									"    var adapter = pm.variables.get(\"adapter\");",
									"    pm.globals.set(\"scaRedirect\", scaRedirect);",
									"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
									"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
									"        postman.setNextRequest(\"SCA/Redirect/DAB&Consors&Sparda_AIS\");",
									"    }",
									"} else if (jsonData._links.startAuthorisation) {",
									"    if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2\");",
									"    } else {",
									"        postman.setNextRequest(\"SCA/Redirect/001a_Msg2\");",
									"    }",
									"} else if (jsonData._links.scaOAuth) {",
									"    pm.globals.set(\"scaOAuth\", jsonData._links.scaOAuth.href);",
									"    postman.setNextRequest(\"oauth2_token_static_code\");",
									"}",
									"",
									"if (pm.variables.get(\"adapter\") === \"santander\") {",
									"    postman.setNextRequest(\"AIS/Accounts/005c_MsgX+1\");",
									"}",
									"",
									"pm.globals.set(\"consentId\", pm.response.json().consentId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81879284-79fa-453a-ade3-3e893e724608",
								"exec": [
									"const date = new Date();",
									"date.setDate(date.getDate() + 1);",
									"const tomorrow = date.toISOString().split(\"T\")[0];",
									"pm.globals.set(\"validUntil\", tomorrow);",
									"",
									"pm.globals.unset(\"scaRedirect\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-IP-Address",
								"value": "0.0.0.0"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "true",
								"type": "text",
								"disabled": true
							},
							{
								"key": "TPP-Redirect-URI",
								"value": "https://example.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"access\": {\n        \"balances\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ],\n        \"accounts\": [\n            {\n                \"iban\": \"{{iban_AIS}}\",\n                \"currency\": \"EUR\"\n            }\n        ]\n    },\n    \"combinedServiceIndicator\": \"false\",\n    \"recurringIndicator\": \"true\",\n    \"validUntil\": \"{{validUntil}}\",\n    \"frequencyPerDay\": \"4\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Get/002",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e2d00f8-71c4-4249-a26c-61dfaf634fa1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						},
						"description": "Standard GET Consent test\n\nDeliver a GET Consent Request where the consent-Id equals the consent Id from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Status/003a",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7293780-988d-46fb-a2c8-ab19cba76fd0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Consent status is received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.consentStatus).to.eql(\"received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/status",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"status"
							]
						},
						"description": "Consent status test - received\n\nDeliver a GET Consent Status Request where the consent-Id equals the consentId from the Account Information Consent Response of test case AIS/Consents/Create/002."
					},
					"response": []
				},
				{
					"name": "SCA/Redirect/DAB&Consors&Sparda_AIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac5c872-8ab2-4455-8f75-cbc75769f8bb",
								"exec": [
									"pm.test(\"Consent status is valid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The consent status has changed to: valid\");",
									"});",
									"",
									"postman.setNextRequest(\"DefaultGetSCAStatus AIS_redirect\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
							"host": [
								"{{scaRedirect}}"
							],
							"query": [
								{
									"key": "psu-id",
									"value": "PSU-Successful"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DefaultGetSCAStatus AIS_redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c7612b6-c6e3-42f2-bead-85ae9bf510de",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});",
									"",
									"postman.setNextRequest(\"AIS/Accounts/005c_MsgX+1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "oauth2_token_static_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dd933cc-46cc-4eef-a561-e231ca4746c5",
								"exec": [
									"pm.globals.set(\"access_token\",  pm.response.json().access_token);",
									"postman.setNextRequest(\"AIS/Accounts/005c_MsgX+1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "authorization_code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/oauth2/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/Redirect/001a_Msg2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "deb69b9f-bbdb-45c4-9f72-cc08ba7968ce",
								"exec": [
									"postman.setNextRequest(null);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"_links/scaOAuth/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.scaOAuth.href\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a Consent request that needs authentication. The redirect SCA approach is selected. A link to start the authorisation is contained in the request."
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28d8f14c-7e41-4bd7-b87b-3db84cbea97d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3\");",
									"});",
									"",
									"// workaround for Unicredit Bank",
									"if (jsonData._links.updatePsuAuthentication) {",
									"    pm.globals.set(\"authorisationId\", jsonData.authorisationId);",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "617071ba-39a4-4d60-a498-54c69d32c960",
								"exec": [
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    pm.request.headers.add({",
									"        key: \"TPP-Redirect-URI\",",
									"        value: \"https://example.com\"",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"value": "false",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_encrypted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56eb8d5b-a5d8-41c3-937b-5075c803ca4a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_encrypted\");",
									"});",
									"",
									"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
									"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations"
							]
						},
						"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ea84dc-1ca6-4b88-b9bd-7373045ed68e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    var href = jsonData._links.authoriseTransaction.href;",
									"    var queryParams = href.slice(href.indexOf(\"?\"), href.length);",
									"    pm.globals.set(\"queryParams\", queryParams);",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4\");",
									"} else {",
									"    pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"        pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"    });",
									"",
									"    pm.test(\"SCA methods are available\", function () {",
									"        pm.response.to.have.jsonBody(\"scaMethods\");",
									"        postman.setGlobalVariable(\"authenticationMethodId_AIS\",jsonData.scaMethods[0].authenticationMethodId);",
									"    });",
									"",
									"    pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"        pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3\");",
									"    });",
									"}",
									"",
									"// workaround for Unicredit",
									"if (jsonData._links.authoriseTransaction) {",
									"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_encrypted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b0aed88-b81c-4544-80dc-0b84d6a392ab",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"scaStatus is psuAuthenticated\", function () {",
									"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
									"});",
									"",
									"pm.test(\"SCA methods are available\", function () {",
									"    pm.response.to.have.jsonBody(\"scaMethods\");",
									"    postman.setGlobalVariable(\"authenticationMethodId\",jsonData.scaMethods[0].authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"type": "text",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "PSU-ID",
								"type": "text",
								"value": "{{psuId_AIS}}"
							},
							{
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "{{psuIdType_AIS}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_AIS}}\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b5d43d4-d8c2-4fbc-90fc-8d359fdb3443",
								"exec": [
									"pm.test(\"scaStatus is scaMethodSelected\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
									"});",
									"",
									"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
									"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_AIS\");",
									"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
									"});",
									"",
									"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
									"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_AIS}}\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17b97cd3-3f09-487d-b226-9a93498f8ad4",
								"exec": [
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f6ca19df-809f-4a8e-bb89-23de9e564257",
								"exec": [
									"if (pm.variables.get(\"adapter\") === \"unicredit\") {",
									"    pm.request.url = request.url + pm.variables.get(\"queryParams\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID-Type",
								"value": "{{psuIdType_AIS}}",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psuId_AIS}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_AIS}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DefaultGetSCAStatus AIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e1f60dd-60b2-4767-9465-2950d7ffe8c1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"scaStatus is finalised\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}/authorisations/{{authorisationId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"authorisations",
								"{{authorisationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/005c_MsgX+1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77b89a85-e803-4cf6-b78a-49a81b606107",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"let accounts = jsonData.accounts;",
									"let iban = pm.variables.get(\"iban_AIS\");",
									"",
									"pm.globals.set(\"accountId\", accounts.find(a => a.iban === iban).resourceId);",
									"",
									"if (pm.variables.get(\"adapter\") === \"sparkasse\") {",
									"    postman.setNextRequest(\"AIS/Accounts/021a_MsgX+1\");",
									"} else {",
									"    postman.setNextRequest(\"AIS/Accounts/005c_MsgX+2\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Accepted values are application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"description": "128-bit universally unique identifier (rf. ISO/IEC 11578:1996) - Format: 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"description": "Use specific data per TPP-Registration-Number"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts?withBalance=false",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/005c_MsgX+2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33cd26c4-a5a0-4bf2-a110-da4dadc025ea",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"transactions\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"transactions\");",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    pm.response.to.have.jsonBody(\"balances\");",
									"});",
									"",
									"postman.setNextRequest(\"AIS/Accounts/020c_MsgX+3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&dateTo=1970-02-01&bookingStatus=booked&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "dateTo",
									"value": "2020-07-01"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						},
						"description": "Read Transaction List Request including the optional query parameter '?withBalance=true'"
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/021a_MsgX+1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb6161b7-61db-49a4-849e-7b66c5453d7f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in format camt.52\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"urn:iso:std:iso:20022:tech:xsd:camt.052.001.02\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions?dateFrom=1970-01-01&dateTo=1970-02-01&bookingStatus=booked&withBalance=true",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "1970-01-01"
								},
								{
									"key": "dateTo",
									"value": "1970-02-01"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "withBalance",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Accounts/020c_MsgX+3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15fc228a-4787-4afb-bc58-e8ac93969639",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains \\\"balances\\\"\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('balances');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/balances",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "AIS/Consents/Del/003",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74fc0c1d-dba2-470e-a829-8b11f9850c9d",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/consents/{{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f31dddaf-c612-4afd-bdb6-dd6e9afdba06",
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.upsert({",
							"    key: \"Authorization\",",
							"    value: \"Bearer {{access_token}}\",",
							"    disabled: !pm.globals.has(\"access_token\")",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "558f3058-e644-4d53-bc6c-8aeba541d2e4",
						"type": "text/javascript",
						"exec": [
							"if (pm.response.code >= 400) {",
							"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers\");",
							"}",
							"",
							"pm.test(\"Response code is successful\", function () {",
							"    pm.expect(pm.response.code).to.be.below(400);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AIS_X",
			"item": [
				{
					"name": "/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}"
							},
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{$guid}}"
							}
						],
						"url": {
							"raw": "{{baseUri}}/v1/accounts/{{accountId}}/transactions/{{transactionId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{accountId}}",
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth2/authorization-request-uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14f8c4a2-d6c5-4654-978a-ff6c62e0aa86",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUri}}/oauth2/authorization-request-uri?state=xyz&redirect_uri=https://client.example.com/cb&sca_oauth_link={{scaOAuth}}&consent_id={{consentId}}",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"authorization-request-uri"
							],
							"query": [
								{
									"key": "state",
									"value": "xyz"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb"
								},
								{
									"key": "sca_oauth_link",
									"value": "{{scaOAuth}}"
								},
								{
									"key": "consent_id",
									"value": "{{consentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oauth2/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e7935f1-701d-4168-bbbe-09efd4ce6cea",
								"exec": [
									"pm.globals.set(\"access_token\",  pm.response.json().access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-GTW-ASPSP-ID",
								"value": "{{aspspId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://client.example.com/cb",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "sca_oauth_link",
									"value": "{{scaOAuth}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{baseUri}}/oauth2/token",
							"host": [
								"{{baseUri}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PIS",
			"item": [
				{
					"name": "sepa-credit-transfers",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "415dd940-8fdc-4252-9b60-139a880afa6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee5c5bd5-9794-462d-9526-22cdc6f0df26",
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"sepa-credit-transfers-supported\");    // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"sepa-credit-transfers-supported\");    // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/PaymentInit/Products/001a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7179fa2-ccf0-4d62-b75b-50e552b195ef",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_encrypted\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_encrypted\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"PIS/GetTransactionStatus/001a\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbdab54a-ce5b-41d9-a7d9-f7c85cea3b93",
										"exec": [
											"pm.globals.unset(\"scaRedirect\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a65995a-b80f-4112-bfab-4a27be6731c4",
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});",
											"",
											"postman.setNextRequest(\"PIS/GetPayment/001a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetTransactionStatus/001a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9eb25fa6-01f4-4271-aaf8-dd40a0b0a105",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetPayment/001a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2da0b954-640b-4d5c-9dd0-764f2379e035",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status received\", function () {",
											"    pm.expect(jsonData).to.have.property('transactionStatus');",
											"});",
											"",
											"if (jsonData.transactionStatus === 'ACSC' || jsonData.transactionStatus === 'RCVD') {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "752ed533-66ab-4a67-8622-123e9e12fcbb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers\");",
											"});",
											"",
											"// workaround for Unicredit Bank",
											"if (jsonData._links.selectAuthenticationMethod) {",
											"    var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
											"} else if (jsonData._links.authoriseTransaction) {",
											"    var authoriseTransactionUri = jsonData._links.authoriseTransaction.href;",
											"    pm.globals.set(\"authorisationId\", authoriseTransactionUri.split(\"/\").pop());",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9716c74d-9039-45cf-b27c-d6f59040da99",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_encrypted\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70eb2ad0-400a-4453-b6d8-2f501791a68d",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"    postman.setGlobalVariable(\"authenticationMethodId_PIS\",jsonData.scaMethods[0].authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dd2b327-2bd1-4f2d-8264-e6cf4af1d21d",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b63089ee-eacc-4a14-a46f-ed6ef6b91ba5",
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58518733-244d-4a96-8df0-369f5e185f26",
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"DefaultGetSCAStatus_payments_sepa\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DefaultGetSCAStatus_payments_sepa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f80529d-5a5b-4dda-8cf4-87c378a1ea5f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "090db9dd-406f-47a4-9b21-cac5eac14930",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "059500f0-b56b-4508-bea4-599182994184",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers\");",
									"}"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "pain.001-sepa-credit-transfers",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a688d5d8-f814-4c6a-b7b1-13c1c2f9da42",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_pain.001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38bbad05-09e5-434a-9da1-ae12011be0e0",
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"pain.001-sepa-credit-transfers-supported\");   // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"pain.001-sepa-credit-transfers-supported\");   // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/PaymentInit/Products/001e",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aae052fb-cb82-4e04-91d1-dbaf1ee4eab1",
										"exec": [
											"pm.globals.unset(\"scaRedirect\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a47ac81-a4c4-409d-b970-a0b0b02458a6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.03\">\n    <CstmrCdtTrfInitn>\n        <GrpHdr>\n            <MsgId>PSD294387538754378</MsgId>\n            <CreDtTm>2018-12-10T09:40:47.314+01:00</CreDtTm>\n            <NbOfTxs>1</NbOfTxs>\n            <CtrlSum>100</CtrlSum>\n            <InitgPty>\n                <Nm>Name InitgPty</Nm>\n            </InitgPty>\n        </GrpHdr>\n        <PmtInf>\n            <PmtInfId>NOTPROVIDED</PmtInfId>\n            <PmtMtd>TRF</PmtMtd>\n            <NbOfTxs>1</NbOfTxs>\n            <CtrlSum>100</CtrlSum>\n            <ReqdExctnDt>1999-01-01</ReqdExctnDt>\n            <Dbtr>\n                <Nm>Debtor Name</Nm>\n            </Dbtr>\n            <DbtrAcct>\n                <Id>\n                    <IBAN>{{iban_PIS}}</IBAN>\n                </Id>\n            </DbtrAcct>\n            <DbtrAgt>\n                <FinInstnId>\n                    <BIC>TESTDETT421</BIC>\n                </FinInstnId>\n            </DbtrAgt>\n            <ChrgBr>SLEV</ChrgBr>\n            <CdtTrfTxInf>\n                <PmtId>\n                    <EndToEndId>EndToEndId</EndToEndId>\n                </PmtId>\n                <Amt>\n                    <InstdAmt Ccy=\"EUR\">100</InstdAmt>\n                </Amt>\n                <Cdtr>\n                    <Nm>Hans Handbuch</Nm>\n                </Cdtr>\n                <CdtrAcct>\n                    <Id>\n                        <IBAN>{{iban_PIS}}</IBAN>\n                    </Id>\n                </CdtrAcct>\n                <RmtInf>\n                    <Ustrd>POSTPaymentEmbPain_OK</Ustrd>\n                </RmtInf>\n            </CdtTrfTxInf>\n        </PmtInf>\n    </CstmrCdtTrfInitn>\n</Document>"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers"
									]
								},
								"description": "Processing of a Payment Initiation Request for a single payment with service sepa-credit-transfer with the body in XML format.\nPayInitReqStart-1.1: It has to be checked that for each Single Payment product/endpoint supported by the ASPSP according to IO2 a payment resource can be successfully created."
							},
							"response": []
						},
						{
							"name": "PIS/GetTransactionStatus/001e",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b868a2c8-75b0-497a-aa0a-dc2263453582",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								},
								"description": "Processing of a Get Transaction Status Request after a Payment Initiation Request for a single payment with product sepa-credit-transfer with the body in XML format."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b6f8956-908a-4d11-87cc-e3726dbef7bc",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_pain001_sepa_credit_transfers\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/Redirect/DAB&Consors&Sparda_PIS_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f6b582e-c2b1-4364-997e-784cdc6851db",
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fea1879-c0ec-4f00-8a4c-a0f69e3bd33f",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "402ae9f7-cfb6-4d47-8cd1-ce23ce21d025",
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_pain001_sepa_credit_transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eadd5c15-bdf5-402c-9f75-8f11961d27fb",
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"postman.setNextRequest(\"DefaultGetSCAStatus_payments_pain01_sepa\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DefaultGetSCAStatus_payments_pain01_sepa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50fce3c6-f5ac-4ab9-9c7c-d9bb9f44ca8f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/payments/pain.001-sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"payments",
										"pain.001-sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d26d9236-966e-41b5-a948-6923ef977c31",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd97c727-d1bb-4caf-af1c-1fa58ddf9f70",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code >= 400) {",
									"    postman.setNextRequest(\"Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic\");",
									"}"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "periodic-payments",
					"item": [
						{
							"name": "GET ASPSP ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90e76c8d-e5d1-4822-893c-0793f8f7b2e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"aspspId\", jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUri}}/v1/aspsps?bic={{bic}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"aspsps"
									],
									"query": [
										{
											"key": "bic",
											"value": "{{bic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment_Product_Support_Checking_Step_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c217fe5-43c5-4f0c-9275-7090de0640ff",
										"exec": [
											"// both variables are needed, because this test could be run with the evironment variables collection and with data file as well",
											"// so it is important to check both possible approaches",
											"const paymentProductSupportedEnvironmentVar = pm.environment.get(\"sepa-credit-transfers-supported\");    // get env var",
											"const paymentProductSupportedIterationVar = pm.iterationData.get(\"sepa-credit-transfers-supported\");    // get var from data file for the current iteration",
											"",
											"if (paymentProductSupportedEnvironmentVar !== \"true\" && paymentProductSupportedIterationVar !== \"true\") {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://example.com",
									"protocol": "http",
									"host": [
										"example",
										"com"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/PaymentInit/Products/003a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3af07b3-ca07-4928-b47a-2a92f90f7749",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});",
											"",
											"pm.globals.set(\"paymentId\", pm.response.json().paymentId);",
											"",
											"if (jsonData._links.updatePsuAuthentication) {",
											"    var updatePsuAuthentication = jsonData._links.updatePsuAuthentication.href;",
											"    var matches = updatePsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithPsuAuthentication) {",
											"    var startAuthorisationWithPsuAuthenticationUri = jsonData._links.startAuthorisationWithPsuAuthentication.href;",
											"    var matches = startAuthorisationWithPsuAuthenticationUri.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic\");",
											"    }",
											"} else if (jsonData._links.startAuthorisationWithEncryptedPsuAuthentication) {",
											"    var startAuthorisationWithEncryptedPsuAuthentication = jsonData._links.startAuthorisationWithEncryptedPsuAuthentication.href;",
											"    var matches = startAuthorisationWithEncryptedPsuAuthentication.match(/authorisations\\/(.+)/);",
											"    if (matches && matches[1]) {",
											"        var authorisationId = matches[1];",
											"        pm.globals.set(\"authorisationId\", authorisationId);",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic_encrypted\");",
											"    } else {",
											"        postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic_encrypted\");",
											"    }",
											"} else if (jsonData._links.scaRedirect) {",
											"    var scaRedirect = jsonData._links.scaRedirect.href;",
											"    pm.globals.set(\"scaRedirect\", scaRedirect);",
											"    var adapter = pm.variables.get(\"adapter\");",
											"    if (adapter === \"dab-bank\" || adapter === \"consors-bank\" || adapter === \"sparda-bank\") {",
											"        pm.globals.set(\"authorisationId\", scaRedirect.split('/').pop());",
											"        postman.setNextRequest(\"SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers_periodic\");",
											"    }",
											"} else if (jsonData._links.scaOAuth) {",
											"    postman.setNextRequest(\"PIS/GetTransactionStatus/003a\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c0d6a21-9d66-4f20-9788-cd490150339d",
										"exec": [
											"pm.globals.unset(\"scaRedirect\");",
											"",
											"const date = new Date();",
											"const today = date.toISOString().split(\"T\")[0];",
											"date.setDate(date.getDate() + 30);",
											"const monthLater = date.toISOString().split(\"T\")[0];",
											"pm.globals.set(\"start_date\", today);",
											"pm.globals.set(\"end_date\", monthLater);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "https://example.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creditorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"creditorName\": \"{{creditorName}}\",\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_PIS}}\",\n        \"currency\": \"EUR\"\n    },\n    \"instructedAmount\": {\n        \"amount\": \"20.99\",\n        \"currency\": \"EUR\"\n    },\n    \"remittanceInformationUnstructured\": \"just\",\n    \"endToEndIdentification\": \"SandboxTPPTest1\",\n    \"startDate\": \"{{start_date}}\",\n    \"endDate\": \"{{end_date}}\",\n\t\"executionRule\": \"following\",\n\t\"frequency\": \"Monthly\",\n    \"dayOfExecution\": \"28\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/Redirect/DAB&Consors&Sparda_PIS_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f630cd62-3a49-4a8b-bcfb-c4c24cad068e",
										"exec": [
											"pm.test(\"Consent status is valid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The payment status has changed to: AcceptedSettlementCompleted\");",
											"});",
											"",
											"postman.setNextRequest(\"PIS/GetPayment/003a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scaRedirect}}?psu-id=PSU-Successful",
									"host": [
										"{{scaRedirect}}"
									],
									"query": [
										{
											"key": "psu-id",
											"value": "PSU-Successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetTransactionStatus/003a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94015c9c-c323-4085-bae5-4352687431d1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transaction status is received\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transactionStatus).to.eql(\"RCVD\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/status",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "PIS/GetPayment/003a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a311fc2-70f0-44e1-a4dd-70575512e0e1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status received\", function () {",
											"    pm.expect(jsonData).to.have.property('transactionStatus');",
											"});",
											"",
											"if (jsonData.transactionStatus === 'ACSC' || jsonData.transactionStatus === 'RCVD') {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "0.0.0.0",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{psuIdType_PIS}}",
										"type": "text"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"value": "{{aspspId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc5565c-3ef3-4c6f-9b91-8a92b497b296",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic\");",
											"});",
											"",
											"// workaround for Unicredit Bank",
											"if (jsonData._links.selectAuthenticationMethod) {",
											"    var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"    pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());",
											"} else if (jsonData._links.authoriseTransaction) {",
											"    var authoriseTransactionUri = jsonData._links.authoriseTransaction.href;",
											"    pm.globals.set(\"authorisationId\", authoriseTransactionUri.split(\"/\").pop());",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers_periodic\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg2_sepa_credit_transfers_periodic_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe0f2013-db1e-42cc-b326-328c4c08410f",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic_encrypted\");",
											"});",
											"",
											"var selectAuthenticationMethodUri = jsonData._links.selectAuthenticationMethod.href;",
											"pm.globals.set(\"authorisationId\", selectAuthenticationMethodUri.split(\"/\").pop());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "TPP-Redirect-Preferred",
										"type": "text",
										"value": "false"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations"
									]
								},
								"description": "Processing of a service request that needs authentication. The PSU has not yet been authorised. Embedded SCA Approach selected. The PSU has more than one embedded method available. PSU authenticaton required for the SCA selection to be applied. Missing authorisation data may be delivered at the same time as an authorisation sub-resource is created."
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab3a836f-c0d5-4d3b-8bd2-9276686f3c93",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"    postman.setGlobalVariable(\"authenticationMethodId_PIS\",jsonData.scaMethods[0].authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"    postman.setNextRequest(\"SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"password\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_2_msg3_sepa_credit_transfers_periodic_encrypted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "494022ab-4414-4d64-b101-23e04836e0ac",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"scaStatus is psuAuthenticated\", function () {",
											"    pm.expect(jsonData.scaStatus).to.eql(\"psuAuthenticated\");",
											"});",
											"",
											"pm.test(\"SCA methods are available\", function () {",
											"    pm.response.to.have.jsonBody(\"scaMethods\");",
											"});",
											"",
											"pm.test(\"_links/selectAuthenticationMethod/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.selectAuthenticationMethod.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psuId_PIS}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"psuData\": {\n        \"encryptedPassword\": \"{{password_PIS}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg3_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac8a6f7b-e040-4bc1-892f-a5f18782ec2b",
										"exec": [
											"pm.test(\"scaStatus is scaMethodSelected\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"scaMethodSelected\");",
											"});",
											"",
											"pm.test(\"SCA method as indicated by the request field \\\"authenticationMethodId\\\"\", function () {",
											"    var authenticationMethodId = pm.variables.get(\"authenticationMethodId_PIS\");",
											"    pm.response.to.have.jsonBody(\"chosenScaMethod.authenticationMethodId\", authenticationMethodId);",
											"});",
											"",
											"pm.test(\"_links/authoriseTransaction/href must be present\", function () {",
											"    pm.response.to.have.jsonBody(\"_links.authoriseTransaction.href\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"authenticationMethodId\": \"{{authenticationMethodId_PIS}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCA/EmbeddedSCA/PsuNotAuth/002_1_msg4_sepa_credit_transfers_periodic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e54db12-19da-4f41-9e2d-76d1241e4c16",
										"exec": [
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});",
											"",
											"",
											"postman.setNextRequest(\"DefaultGetSCAStatus_periodic_sepa\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "{{psuIdType_PIS}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psuId_PIS}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scaAuthenticationData\": \"{{scaAuthenticationData_PIS}}\"\n}"
								},
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DefaultGetSCAStatus_periodic_sepa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29ad6a02-368e-4b6e-b0e5-e42cfe9f4f45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is finalised\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scaStatus).to.eql(\"finalised\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GTW-ASPSP-ID",
										"type": "text",
										"value": "{{aspspId}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "{{baseUri}}/v1/periodic-payments/sepa-credit-transfers/{{paymentId}}/authorisations/{{authorisationId}}",
									"host": [
										"{{baseUri}}"
									],
									"path": [
										"v1",
										"periodic-payments",
										"sepa-credit-transfers",
										"{{paymentId}}",
										"authorisations",
										"{{authorisationId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0932a21f-362f-4b40-9c28-7758ec4ae628",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "07723268-9ebc-4ad1-83eb-80d1aae0fe58",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ff9173ed-900d-4fe4-9be8-93ba469197ba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e3f29944-855a-49e5-8a86-785d420437bc",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response code is successful\", function () {",
							"    pm.expect(pm.response.code).to.be.below(400);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
